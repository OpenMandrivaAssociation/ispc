From 01aa2b454b9427ecca80fc87f58f4aff496de770 Mon Sep 17 00:00:00 2001
From: Dmitry Babokin <dmitry.y.babokin@intel.com>
Date: Tue, 4 Aug 2020 16:27:43 -0700
Subject: [PATCH 109/112] Fix for 1844: backport of LLVM patch

---
 llvm_patches/10_0_fix_for_1844.patch | 18 ++++++++++++++++++
 tests/lit-tests/1844.ispc            | 23 +++++++++++++++++++++++
 2 files changed, 41 insertions(+)
 create mode 100644 llvm_patches/10_0_fix_for_1844.patch
 create mode 100644 tests/lit-tests/1844.ispc

diff --git a/llvm_patches/10_0_fix_for_1844.patch b/llvm_patches/10_0_fix_for_1844.patch
new file mode 100644
index 00000000..4f4b2631
--- /dev/null
+++ b/llvm_patches/10_0_fix_for_1844.patch
@@ -0,0 +1,18 @@
+# Fix for #1844, affects avx512skx-i8x64 and avx512skx-i16x32.
+# It's a port of 11.0 commit edcfb47ff6d5562e22207f364c65f84302aa346b
+# https://reviews.llvm.org/D76312
+diff --git a/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp b/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
+index f88950fc872..7a68d18ef9b 100644
+--- a/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
++++ b/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
+@@ -11023,7 +11023,9 @@ SDValue DAGCombiner::visitTRUNCATE(SDNode *N) {
+ 
+   // Attempt to pre-truncate BUILD_VECTOR sources.
+   if (N0.getOpcode() == ISD::BUILD_VECTOR && !LegalOperations &&
+-      TLI.isTruncateFree(SrcVT.getScalarType(), VT.getScalarType())) {
++      TLI.isTruncateFree(SrcVT.getScalarType(), VT.getScalarType()) &&
++      // Avoid creating illegal types if running after type legalizer.
++      (!LegalTypes || TLI.isTypeLegal(VT.getScalarType()))) {
+     SDLoc DL(N);
+     EVT SVT = VT.getScalarType();
+     SmallVector<SDValue, 8> TruncOps;
diff --git a/tests/lit-tests/1844.ispc b/tests/lit-tests/1844.ispc
new file mode 100644
index 00000000..7a69fa61
--- /dev/null
+++ b/tests/lit-tests/1844.ispc
@@ -0,0 +1,23 @@
+// RUN: %{ispc} %s --arch=x86-64 --target=avx512skx-i8x64
+// RUN: %{ispc} %s --arch=x86-64 --target=avx512skx-i16x32
+// RUN: %{ispc} %s --arch=x86-64 --target=avx512skx-i32x16
+// RUN: %{ispc} %s --arch=x86-64 --target=avx2-i8x32
+// RUN: %{ispc} %s --arch=x86-64 --target=host
+
+// REQUIRES: X86_ENABLED
+
+extern uniform unsigned int64 var_6;
+extern uniform unsigned int16 var_11;
+extern uniform bool arr_201 [1] [15] [20];
+extern uniform unsigned int8 arr_202 [1] [15] [20];
+extern uniform int64 arr_210 [1] [15] [20] [26] [11];
+
+export void test() {
+    foreach(i_53 = var_6...0L)
+        for (uniform unsigned int16 i_54 = 0L; i_54 < 14L; i_54 += 4L)
+            for (uniform unsigned int8 i_55 = 0; i_55 < 19; i_55 += 2)
+                for (uniform unsigned int8 i_57 = 0L; i_57 < 25L; i_57 += 4)
+                    for (uniform unsigned int8 i_58 = 0; i_58 < extract(((varying int32)(varying unsigned int16)var_11) ^ arr_201 [i_53] [i_54] [i_55], 0U) - 120L; i_58 += 4L)
+                        if (arr_201 [i_53] [i_54] [i_55])
+                            arr_210 [i_53] [i_54] [i_55] [i_57] [i_58] = -arr_202 [i_53] [i_54] [i_55];
+}
-- 
2.21.3
